module.exports = {


  friendlyName: 'Update password and login',


  description: 'Finish the password recovery flow by setting the new password and '+
  'logging in the requesting player, based on the authenticity of their token.',


  inputs: {

    password: {
      description: 'The new, unencrypted password.',
      example: 'abc123v2',
      required: true
    },

    token: {
      description: 'The password token that was generated by the `sendPasswordRecoveryEmail` endpoint.',
      example: 'gwa8gs8hgw9h2g9hg29hgwh9asdgh9q34$$$$$asdgasdggds',
      required: true
    }

  },


  exits: {

    invalidToken: {
      description: 'The provided password token is invalid, expired, or has already been used.',
      responseType: 'expired'
    }

  },


  fn: async function (inputs, exits) {

    if(!inputs.token) {
      throw 'invalidToken';
    }

    // Look up the player with this reset token.
    var playerRecord = await player.findOne({ passwordResetToken: inputs.token });

    // If no such player exists, or their token is expired, bail.
    if (!playerRecord || playerRecord.passwordResetTokenExpiresAt <= Date.now()) {
      throw 'invalidToken';
    }

    // Hash the new password.
    var hashed = await sails.helpers.passwords.hashPassword(inputs.password);

    // Store the player's new password and clear their reset token so it can't be used again.
    await player.update({ id: playerRecord.id }).set({
      password: hashed,
      passwordResetToken: '',
      passwordResetTokenExpiresAt: 0
    });

    // Log the player in.
    this.req.session.playerId = playerRecord.id;

    return exits.success();

  }


};
